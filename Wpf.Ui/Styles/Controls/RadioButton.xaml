<!--
    This Source Code Form is subject to the terms of the MIT License.
    If a copy of the MIT was not distributed with this file, You can obtain one at https://opensource.org/licenses/MIT.
    Copyright (C) Leszek Pomianowski and WPF UI Contributors.
    All Rights Reserved.
    
    Based on Microsoft XAML for Win UI
    Copyright (c) Microsoft Corporation. All Rights Reserved.
-->

<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:system="clr-namespace:System;assembly=System.Runtime">

    <system:Double x:Key="RadioButtonCheckGlyphSize">12</system:Double>
    <system:Double x:Key="RadioButtonOuterEllipseSize">20</system:Double>
    <!--
    <system:Double x:Key="RadioButtonCheckGlyphPointerOverSize">14</system:Double>
    <system:Double x:Key="RadioButtonCheckGlyphPressedOverSize">10</system:Double>-->
    <system:Double x:Key="RadioButtonStrokeThickness">1</system:Double>
    <Thickness x:Key="RadioButtonPadding">8,6,0,0</Thickness>

    <Style x:Key="DefaultRadioButtonStyle" TargetType="{x:Type RadioButton}">
        <!--  Universal WPF UI focus  -->
        <Setter Property="FocusVisualStyle" Value="{DynamicResource DefaultControlFocusVisualStyle}" />
        <!--  Universal WPF UI focus  -->
        <Setter Property="Background">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource SystemAccentColorSecondary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="Foreground">
            <Setter.Value>
                <SolidColorBrush Color="{DynamicResource TextFillColorPrimary}" />
            </Setter.Value>
        </Setter>
        <Setter Property="BorderBrush" Value="Transparent" />
        <Setter Property="Margin" Value="0" />
        <Setter Property="Padding" Value="{StaticResource RadioButtonPadding}" />
        <Setter Property="Cursor" Value="Hand" />
        <Setter Property="HorizontalAlignment" Value="Left" />
        <Setter Property="VerticalAlignment" Value="Center" />
        <Setter Property="HorizontalContentAlignment" Value="Left" />
        <Setter Property="VerticalContentAlignment" Value="Top" />
        <Setter Property="FontFamily" Value="{DynamicResource ContentControlThemeFontFamily}" />
        <Setter Property="FontSize" Value="{DynamicResource ControlContentThemeFontSize}" />
        <Setter Property="FontWeight" Value="Normal" />
        <Setter Property="MinWidth" Value="120" />
        <Setter Property="KeyboardNavigation.IsTabStop" Value="True" />
        <Setter Property="Focusable" Value="True" />
        <Setter Property="SnapsToDevicePixels" Value="True" />
        <Setter Property="OverridesDefaultStyle" Value="True" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RadioButton}">
                    <Grid HorizontalAlignment="{TemplateBinding HorizontalAlignment}" VerticalAlignment="{TemplateBinding VerticalAlignment}">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="20" />
                            <ColumnDefinition Width="*" />
                        </Grid.ColumnDefinitions>
                        <Grid Height="32" VerticalAlignment="Top">
                            <Ellipse
                                x:Name="OuterEllipse"
                                Width="{StaticResource RadioButtonOuterEllipseSize}"
                                Height="{StaticResource RadioButtonOuterEllipseSize}"
                                Stroke="{DynamicResource ControlElevationBorderBrush}"
                                StrokeThickness="{StaticResource RadioButtonStrokeThickness}"
                                UseLayoutRounding="False">
                                <Ellipse.Fill>
                                    <SolidColorBrush Color="{DynamicResource ControlAltFillColorSecondary}" />
                                </Ellipse.Fill>
                            </Ellipse>
                            <!--  A seperate element is added since the two orthogonal state groups that cannot touch the same property  -->
                            <Ellipse
                                x:Name="CheckOuterEllipse"
                                Width="{StaticResource RadioButtonOuterEllipseSize}"
                                Height="{StaticResource RadioButtonOuterEllipseSize}"
                                Fill="{TemplateBinding Background}"
                                Opacity="0"
                                Stroke="{TemplateBinding Background}"
                                StrokeThickness="{StaticResource RadioButtonStrokeThickness}"
                                UseLayoutRounding="False" />
                            <Ellipse
                                x:Name="CheckGlyph"
                                Width="{StaticResource RadioButtonCheckGlyphSize}"
                                Height="{StaticResource RadioButtonCheckGlyphSize}"
                                Opacity="0"
                                Stroke="{DynamicResource CircleElevationBorderBrush}"
                                UseLayoutRounding="False">
                                <Ellipse.Fill>
                                    <SolidColorBrush Color="{DynamicResource TextOnAccentFillColorPrimary}" />
                                </Ellipse.Fill>
                                <Ellipse.LayoutTransform>
                                    <ScaleTransform ScaleX="1.0" ScaleY="1.0" />
                                </Ellipse.LayoutTransform>
                            </Ellipse>
                            <!--  A seperate element is added since the two orthogonal state groups that cannot touch the same property  -->
                            <Border
                                x:Name="PressedCheckGlyph"
                                Width="4"
                                Height="4"
                                BorderBrush="{DynamicResource CircleElevationBorderBrush}"
                                CornerRadius="6"
                                Opacity="0"
                                UseLayoutRounding="False">
                                <Border.Background>
                                    <SolidColorBrush Color="{DynamicResource TextOnAccentFillColorPrimary}" />
                                </Border.Background>
                            </Border>
                        </Grid>
                        <ContentPresenter
                            x:Name="ContentPresenter"
                            Grid.Column="1"
                            Margin="{TemplateBinding Padding}"
                            HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                            VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                            Content="{TemplateBinding Content}"
                            ContentTemplate="{TemplateBinding ContentTemplate}"
                            TextElement.Foreground="{TemplateBinding Foreground}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <!-- Clunky, todo
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <MultiTrigger.EnterActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckGlyph"
                                            Storyboard.TargetProperty="(Ellipse.LayoutTransform).(ScaleTransform.ScaleY)"
                                            From="1.0"
                                            To="1.2"
                                            Duration="00:00:00.167" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckGlyph"
                                            Storyboard.TargetProperty="(Ellipse.LayoutTransform).(ScaleTransform.ScaleX)"
                                            From="1.0"
                                            To="1.2"
                                            Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.EnterActions>
                            <MultiTrigger.ExitActions>
                                <BeginStoryboard>
                                    <Storyboard>
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckGlyph"
                                            Storyboard.TargetProperty="(Ellipse.LayoutTransform).(ScaleTransform.ScaleY)"
                                            From="1.2"
                                            To="1.0"
                                            Duration="00:00:00.167" />
                                        <DoubleAnimation
                                            Storyboard.TargetName="CheckGlyph"
                                            Storyboard.TargetProperty="(Ellipse.LayoutTransform).(ScaleTransform.ScaleX)"
                                            From="1.2"
                                            To="1.0"
                                            Duration="00:00:00.167" />
                                    </Storyboard>
                                </BeginStoryboard>
                            </MultiTrigger.ExitActions>
                        </MultiTrigger>
                        -->
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1.0" />
                        </MultiTrigger>
                        <Trigger Property="IsChecked" Value="True">
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="1.0" />
                            <Setter TargetName="OuterEllipse" Property="Opacity" Value="0.0" />
                            <Setter TargetName="CheckOuterEllipse" Property="Opacity" Value="1.0" />
                        </Trigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterEllipse" Property="Fill" Value="{DynamicResource ControlFillColorSecondaryBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True" />
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="True" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="CheckOuterEllipse" Property="Opacity" Value="0.86" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="False" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
                        </MultiTrigger>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsChecked" Value="True" />
                                <Condition Property="IsEnabled" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter Property="Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
                            <Setter TargetName="CheckGlyph" Property="Opacity" Value="0.7" />
                            <Setter TargetName="CheckOuterEllipse" Property="Opacity" Value="0.7" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style BasedOn="{StaticResource DefaultRadioButtonStyle}" TargetType="{x:Type RadioButton}" />

</ResourceDictionary>
